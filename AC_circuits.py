import streamlit as st
import numpy as np
import matplotlib.pyplot as plt
import math

st.set_page_config(page_title="RLC Obvod Simul√°tor", layout="wide")

st.title("üîå Interakt√≠vna simul√°cia RLC obvodov")
st.markdown("""
Tento simul√°tor ti umo≈æ≈àuje analyzova≈• chovanie odporu (R), cievky (L) a kondenz√°tora (C) v r√¥znych typoch obvodov ‚Äì **DC aj AC**, vr√°tane prechodov√Ωch javov, v√Ωpoƒçtov v√Ωkonov a f√°zorov√©ho spr√°vania.

---
""")

# Pomocn√° funkcia na aplikovanie SI prefixov
prefix_map = {
    "p" : 1e-12,
    "n" : 1e-9,
    "¬µ" : 1e-6,
    "m" : 1e-3,
    ""  : 1,
    "k" : 1e3,
    "M" : 1e6,
    "G" : 1e9
}

def apply_prefix(value, prefix):
    return value * prefix_map[prefix]

def format_value_si(value, unit):
    for prefix, factor in reversed(prefix_map.items()):
        if abs(value) >= factor:
            return f"{value / factor:.2f} {prefix}{unit}"
    return f"{value:.2e} {unit}"

# V√Ωber typu zapojenia
type_of_circuit = st.selectbox("Vyber typ zapojenia:", ["DC - R", "DC - RL", "DC - RC", "DC - RLC (prechodov√Ω dej)", "AC - R", "AC - RL", "AC - RC", "AC - RLC"])

# Sekcia zad√°vania hodn√¥t
st.header("üßÆ Zadaj hodnoty prvkov")
col1, col2, col3 = st.columns(3)

with col1:
    R_val = st.number_input("Odpor R", min_value=0.0, value=100.0)
    R_prefix = st.selectbox("Prefix R", list(prefix_map.keys()), index=4, key="Rprefix")
    R = apply_prefix(R_val, R_prefix)
    st.markdown(f"‚û°Ô∏è R = {format_value_si(R, 'Œ©')}")

with col2:
    L_val = st.number_input("Indukƒçnos≈• L", min_value=0.0, value=10.0)
    L_prefix = st.selectbox("Prefix L", list(prefix_map.keys()), index=2, key="Lprefix")
    L = apply_prefix(L_val, L_prefix)
    st.markdown(f"‚û°Ô∏è L = {format_value_si(L, 'H')}")

with col3:
    C_val = st.number_input("Kapacita C", min_value=0.0, value=1.0)
    C_prefix = st.selectbox("Prefix C", list(prefix_map.keys()), index=2, key="Cprefix")
    C = apply_prefix(C_val, C_prefix)
    st.markdown(f"‚û°Ô∏è C = {format_value_si(C, 'F')}")

st.markdown("---")

st.header("‚öôÔ∏è Nastavenie zdroja")
colu1, colu2 = st.columns(2)

with colu1:
    U_val = st.number_input("Nap√§tie (U)", value=10.0)
    U_prefix = st.selectbox("Prefix nap√§tia", list(prefix_map.keys()), index=4, key="Uprefix")
    U = apply_prefix(U_val, U_prefix)
    st.markdown(f"‚û°Ô∏è U = {format_value_si(U, 'V')}")

with colu2:
    if "AC" in type_of_circuit:
        f = st.number_input("Frekvencia [Hz]", value=50.0)
        omega = 2 * math.pi * f
        st.markdown(f"‚û°Ô∏è œâ = {omega:.2f} rad/s")
    else:
        omega = 0
        f = 0

st.markdown("---")

# V√Ωpoƒçty impedanci√≠
Z_R = complex(R, 0)
Z_L = complex(0, omega * L)
Z_C = complex(0, -1 / (omega * C)) if C > 0 and omega > 0 else complex(0, 0)

if "RLC" in type_of_circuit:
    Z_total = Z_R + Z_L + Z_C
elif "RL" in type_of_circuit:
    Z_total = Z_R + Z_L
elif "RC" in type_of_circuit:
    Z_total = Z_R + Z_C
else:
    Z_total = Z_R

# V√Ωpoƒçty
if Z_total != 0:
    I_complex = U / Z_total
else:
    I_complex = 0

I_mag = abs(I_complex)
phi = np.angle(I_complex, deg=True)

# V√Ωkony
S = U * I_mag  # zdanliv√Ω
P = U * I_mag * math.cos(np.radians(phi))  # ƒçinn√Ω
Q = U * I_mag * math.sin(np.radians(phi))  # jalov√Ω

# Zobrazenie v√Ωsledkov
st.header("üìä V√Ωsledky")
colr1, colr2, colr3 = st.columns(3)
colr1.metric("Impedancia |Z|", f"{abs(Z_total):.2f} Œ©")
colr2.metric("Pr√∫d |I|", f"{I_mag:.3f} A")
colr3.metric("F√°zov√Ω posun œÜ", f"{phi:.2f}¬∞")

st.subheader("üí° V√Ωkony")
st.markdown(f"- **ƒåinn√Ω v√Ωkon (P):** {P:.2f} W")
st.markdown(f"- **Jalov√Ω v√Ωkon (Q):** {Q:.2f} VAR")
st.markdown(f"- **Zdanliv√Ω v√Ωkon (S):** {S:.2f} VA")

# F√°zorov√Ω diagram
if "AC" in type_of_circuit:
    st.subheader("üìê F√°zorov√Ω diagram")
    fig, ax = plt.subplots()
    ax.quiver(0, 0, U, 0, angles='xy', scale_units='xy', scale=1, color='r', label='Nap√§tie U')
    ax.quiver(0, 0, I_mag * math.cos(np.radians(phi)), I_mag * math.sin(np.radians(phi)),
              angles='xy', scale_units='xy', scale=1, color='b', label='Pr√∫d I')
    ax.set_xlim(-U, U)
    ax.set_ylim(-U, U)
    ax.set_aspect('equal')
    ax.grid(True)
    ax.legend()
    st.pyplot(fig)

# ƒåasov√Ω priebeh ‚Äì len pre RL, RC, RLC
if "DC" in type_of_circuit and ("RL" in type_of_circuit or "RC" in type_of_circuit or "RLC" in type_of_circuit):
    st.subheader("‚è±Ô∏è ƒåasov√Ω priebeh nap√§tia a pr√∫du (prechodov√Ω jav)")
    t = np.linspace(0, 5, 1000)
    if "RL" in type_of_circuit:
        tau = L / R if R > 0 else 0
        i_t = (U / R) * (1 - np.exp(-t / tau))
        u_L = U - R * i_t
        st.markdown(f"ƒåasov√° kon≈°tanta œÑ = {tau:.3f} s")
    elif "RC" in type_of_circuit:
        tau = R * C if R > 0 else 0
        u_C = U * (1 - np.exp(-t / tau))
        i_t = (U / R) * np.exp(-t / tau)
        st.markdown(f"ƒåasov√° kon≈°tanta œÑ = {tau:.3f} s")
    elif "RLC" in type_of_circuit:
        # Podobn√© ako tlmen√Ω oscil√°tor ‚Äì zlo≈æitej≈°√≠ priebeh
        alpha = R / (2 * L)
        omega_0 = 1 / np.sqrt(L * C)
        if alpha > omega_0:
            # Pre≈•a≈æen√Ω (aperiodick√Ω)
            s1 = -alpha + np.sqrt(alpha**2 - omega_0**2)
            s2 = -alpha - np.sqrt(alpha**2 - omega_0**2)
            i_t = (U / L) * (np.exp(s1 * t) - np.exp(s2 * t))
        else:
            omega_d = np.sqrt(omega_0**2 - alpha**2)
            i_t = (U / (L * omega_d)) * np.exp(-alpha * t) * np.sin(omega_d * t)
    fig2, ax2 = plt.subplots()
    ax2.plot(t, i_t, label="Pr√∫d i(t)", color="b")
    ax2.set_xlabel("ƒåas [s]")
    ax2.set_ylabel("Pr√∫d [A]")
    ax2.grid(True)
    ax2.legend()
    st.pyplot(fig2)

# Diagnostika
st.markdown("---")
st.markdown("### ‚ÑπÔ∏è Diagnostika a kontrola")
if R == 0 and L == 0 and C == 0:
    st.warning("Nie je zvolen√Ω ≈æiadny prvok ‚Äì pros√≠m zadaj aspo≈à jeden.")
else:
    prvky = []
    if R > 0: prvky.append("R")
    if L > 0: prvky.append("L")
    if C > 0: prvky.append("C")
    st.success(f"Zvolen√© prvky: {', '.join(prvky)}")